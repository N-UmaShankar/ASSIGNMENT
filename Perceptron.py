# -*- coding: utf-8 -*-
"""onnu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wuHYB1fzHzhoCFs9zyXbEYWc17d3c5yz
"""

import numpy as np
import matplotlib.pyplot as plt
from prettytable import PrettyTable

x1 = np.array([[1], [-1], [0], [0.1], [0.2],[0.9]])
x2 = np.array([[1], [-1], [0.5], [0.5], [0.2], [0.5]])
print("\n X1 : \n", x1)
print("\n X2 : \n", x2)

data = np.hstack((x1, x2)).tolist()
y = np.array([1, -1, -1, -1, 1, 1])
print("\n class : \n", y)

data = np.hstack((x1, x2)).tolist()
print(data)
# Define column headers
headers = ["x1", "x2", "Class"]
sample_data = PrettyTable(headers)
mean_squared_table = PrettyTable(headers)

for i,row in enumerate(data):
    sample_data.add_row(row+[y[i]])
print("\n Sample Data \n",sample_data)
print(np.mean(data,axis=0))
data = data - np.mean(data,axis=0)
for i,row in enumerate(data):
    mean_squared_table.add_row(row.tolist()+[y[i]])
print("\n Mean Squared  \n",mean_squared_table)

# Create two arrays for the x and y coordinates of the points
x_coords = data[:,0]
y_coords = data[:,1]
# Loop through the two classes
for i, class_label in enumerate(np.unique(y)):
    # Get the data points for the current class
    class_data = data[y == class_label]
    # Get the x and y coordinates for the current class
    class_x = class_data[:,0]
    class_y = class_data[:,1]
    # Plot the data points with different symbols and colors for each class
    if class_label == 1:
        plt.scatter(class_x, class_y, marker='+', color='blue', label='Class  = +1')
    else:
        plt.scatter(class_x, class_y, marker='*', color='orange', label='Class = -1')
# Set the axis labels and legend
plt.xlabel('x1')
plt.ylabel('x2')
plt.legend()
# Show the plot
plt.show()



def graph(data,w):
    plt.scatter(data[:,0], data[:,1], c=y, cmap='coolwarm')
    plt.clf()
    plt.scatter(data[:,0], data[:,1], c=y, cmap='coolwarm')
    slope = -w[1] / w[2]
    intercept = -w[0] / w[2]
    x_vals = np.array([-1, 1])
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '--', color='black')
    plt.show()

correctClassified = 0
w=[0,1,1]
graph(data,w)
while (correctClassified != len(data)): #Until everything is classified
  for sample in range(len(data)):
    x = np.append(1,data[sample,0:2])
    print("***Value X****",x)
    if y[sample]==1:
        print(np.dot(np.transpose(w),x))
        if np.dot(np.transpose(w),x)>=0:
            correctClassified=correctClassified+1
            print("sample is pos")
        else: #orange is classified as apple
          w=w+x
          print("******Miss Classified - weight Update*****", "\n",w)
          graph(data,w)
          break

    else:
        print(np.dot(np.transpose(w),x))
        if np.dot(np.transpose(w),x)<0:
            correctClassified=correctClassified+1
            print("sample is neg")
        else:
            w=w-x
            print("******Miss Classified - weight Update*****", "\n",w)
            graph(data,w)

            break

  if(correctClassified != len(data)):
      correctClassified=0           
print(w) 

# print final weights
print("Final weights: ", w)
